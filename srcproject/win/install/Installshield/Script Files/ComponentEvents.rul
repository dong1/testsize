//////////////////////////////////////////////////////////////////////////////
//  EVENT:      Installing event is sent just before files for the component: 
//              CUBRID are transferred. 
///////////////////////////////////////////////////////////////////////////////
export prototype CUBRID_Installing();
function CUBRID_Installing()
	NUMBER	nResult;
	STRING	szProgram, PROGRAM;
	STRING	szKey, szKeyTray;
	NUMBER	nvType, nvSize;
	STRING	svNumValue;

begin
    if( CreateRegistrySet ("CUBRID") < 0 ) then
    	MessageBox (@SCRIPT_STR_0044,SEVERE);
		abort;
	endif;

	Disable(LOGGING) ;
	szKey = "SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment";      

    RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
	RegDBGetKeyValueEx (szKey, "Path" , nvType, svNumValue, nvSize);
	nResult = RegDBSetKeyValueEx(szKey, "Path", REGDB_STRING_EXPAND, TARGETDIR^"\\bin\\;" + svNumValue  , -1);
    RefreshEnvironment();

	Enable(LOGGING) ;
end;

//////////////////////////////////////////////////////////////////////////////
//  EVENT:      Installed event is sent just after files for the component: 
//              CUBRID are transferred. 
///////////////////////////////////////////////////////////////////////////////
export prototype CUBRID_Installed();
function CUBRID_Installed()
	STRING	PROGRAM, Service_Path;
	STRING  TARGET_PATH, TARGET_DIR;
	STRING  szDBPath, svResult, szCaption;
	STRING  SCH_FILE, OBJ_FILE, dbtxt;
	int     nResult;
begin
	RefreshEnvironment();

	Delay(3);
     
    dbtxt = TARGETDIR^"databases\\databases.txt";
	LongPathToQuote(dbtxt, TRUE);
	nResult  = Is (FILE_EXISTS, dbtxt);

    if (nResult = FALSE) then
        LaunchAppAndWait(WINSYSDIR + "\\cmd.exe", " /c echo on > " + dbtxt, WAIT) ;
    endif;

    // mkdir conf files
    makeconf(TARGETDIR^"conf\\cubrid_broker.conf");
    makeconf(TARGETDIR^"conf\\cubrid.conf");
    makeconf(TARGETDIR^"conf\\cm.conf");
    makeconf(TARGETDIR^"conf\\cmdb.pass");
    makeconf(TARGETDIR^"conf\\cm.pass");
    
	// Register CUBRID Service	
	
	PROGRAM = TARGETDIR + "\\bin\\ctrlService.exe ";
	Service_Path = TARGETDIR + "\\bin";
	LongPathToQuote (PROGRAM, TRUE);
	LongPathToQuote (Service_Path, TRUE);
	
	if( LaunchAppAndWait (PROGRAM, "-i " + Service_Path, WAIT ) < 0) then  
		MessageBox(@SCRIPT_STR_0045 + " : " + PROGRAM, WARNING);
	endif;

	// Start CUBRIDService
	PROGRAM = TARGETDIR + "\\bin\\ctrlService.exe ";
	LongPathToQuote(PROGRAM, TRUE);
	LaunchAppAndWait(PROGRAM, "-start", WAIT);

	Delay(1);
              
	svResult = @SCRIPT_STR_0046;
	szCaption = @SCRIPT_STR_0047;
	nResult = SprintfBox(MB_YESNO,szCaption,"%s",svResult);

	if (nResult == IDYES) then
		szDBPath = TARGETDIR^"\\databases\\demodb";
		DeleteFile(szDBPath^"\\*");

		// make demodb database
		TARGET_DIR = TARGETDIR + "\\databases\\demodb";
		if (ChangeDirectory (TARGET_DIR) = 0) then
			TARGET_PATH = TARGETDIR;
			PROGRAM = TARGETDIR + "\\bin\\makedemo_is.bat";
			SCH_FILE = TARGETDIR + "\\bin\\demodb_schema";
			OBJ_FILE = TARGETDIR + "\\bin\\demodb_objects";
						
			LongPathToQuote(PROGRAM, TRUE);
			LongPathToQuote(TARGET_PATH, TRUE);
			LaunchAppAndWait(PROGRAM, "demodb " + TARGET_PATH, WAIT) ;
			LaunchAppAndWait(WINSYSDIR + "\\cmd.exe", " /c del " + PROGRAM, WAIT) ;
			LaunchAppAndWait(WINSYSDIR + "\\cmd.exe", " /c del " + SCH_FILE, WAIT) ;
			LaunchAppAndWait(WINSYSDIR + "\\cmd.exe", " /c del " + OBJ_FILE, WAIT) ;
		endif;
	endif;
end;

///////////////////////////////////////////////////////////////////////////////
//  EVENT:      Installing event is sent just before files for the component: 
//              cubridmanager are transferred. 
///////////////////////////////////////////////////////////////////////////////
export prototype cubridmanager_Installing();
function cubridmanager_Installing()
	STRING	szKey;
	NUMBER	nvType, nvSize, nResult, ExitCode;
	STRING	svNumValue;
	STRING        szProgram;
	STRING  szDir, szFile;
begin
    // registry 
    if( CreateRegistrySet ("cubridmanager") < 0 ) then
    	MessageBox (@SCRIPT_STR_0048,SEVERE);
		abort;
	endif;

	szKey = "SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment";
	RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
	RegDBGetKeyValueEx (szKey, "PATH" , nvType, svNumValue, nvSize);

	Disable(LOGGING);         
	nResult = RegDBSetKeyValueEx(szKey, "PATH", REGDB_STRING_EXPAND, TARGETDIR^"\\Manager\\cmclient\\;"+ svNumValue  , -1);
	Enable(LOGGING);
	
	// remove old meta-data file if exist.
	szProgram = WINSYSDIR^"\\cmd.exe";
	LongPathToQuote(szProgram, TRUE);

	szDir = TARGETDIR^"Manager\\cmclient\\configuration\\org.eclipse.core.runtime";
	if (ExistsDir(szDir) == EXISTS) then
		// .contributions.*
		szFile = szDir^".contributions.*";
		LongPathToQuote(szFile, TRUE);
		RunProgram(szProgram, "/c del " + szFile, WAIT, SW_HIDE, -1, ExitCode);   

		// .extraData.*
		szFile = szDir^".extraData.*";
		LongPathToQuote(szFile, TRUE);
		RunProgram(szProgram, "/c del " + szFile, WAIT, SW_HIDE, -1, ExitCode);
		
		// .mainData.*
		szFile = szDir^".mainData.*";
		LongPathToQuote(szFile, TRUE);
		RunProgram(szProgram, "/c del " + szFile, WAIT, SW_HIDE, -1, ExitCode);

		// .orphans.*
		szFile = szDir^".orphans.*";
		LongPathToQuote(szFile, TRUE);
		RunProgram(szProgram, "/c del " + szFile, WAIT, SW_HIDE, -1, ExitCode);
		
		// .table.*
		szFile = szDir^".table.*";
		LongPathToQuote(szFile, TRUE);
		RunProgram(szProgram, "/c del " + szFile, WAIT, SW_HIDE, -1, ExitCode);
		
		szDir = TARGETDIR^"Manager\\cmclient\\configuration\\org.eclipse.core.runtime\\.manager";
		if (ExistsDir(szDir) == EXISTS) then
			// .fileTable.*
			szFile = szDir^".fileTable.*";
			LongPathToQuote(szFile, TRUE);
			RunProgram(szProgram, "/c del " + szFile, WAIT, SW_HIDE, -1, ExitCode);

			// .fileTableLock
			szFile = szDir^".fileTableLock";
			LongPathToQuote(szFile, TRUE);
			RunProgram(szProgram, "/c del " + szFile, WAIT, SW_HIDE, -1, ExitCode); 
		endif;
	endif;

	szDir = TARGETDIR^"Manager\\cmclient\\configuration\\org.eclipse.osgi";
	if (ExistsDir(szDir) == EXISTS) then
		// .bundledata.*
		szFile = szDir^".bundledata.*";
		LongPathToQuote(szFile, TRUE);
		RunProgram(szProgram, "/c del " + szFile, WAIT, SW_HIDE, -1, ExitCode);
		
		// .lazy.*
		szFile = szDir^".lazy.*";
		LongPathToQuote(szFile, TRUE);
		RunProgram(szProgram, "/c del " + szFile, WAIT, SW_HIDE, -1, ExitCode);
		                                                                         
		// .state.*
		szFile = szDir^".state.*";
		LongPathToQuote(szFile, TRUE);
		RunProgram(szProgram, "/c del " + szFile, WAIT, SW_HIDE, -1, ExitCode);
		
		//	splash.bmp
		szFile = szDir^"splash.bmp";
		LongPathToQuote(szFile, TRUE);
		RunProgram(szProgram, "/c del " + szFile, WAIT, SW_HIDE, -1, ExitCode);

		szDir = TARGETDIR^"Manager\\cmclient\\configuration\\org.eclipse.osgi\\.manager";
		if (ExistsDir(szDir) == EXISTS) then
			// .fileTable.*	
			szFile = szDir^".fileTable.*";
			LongPathToQuote(szFile, TRUE);
			RunProgram(szProgram, "/c del " + szFile, WAIT, SW_HIDE, -1, ExitCode);
                                                                            
			// .fileTableLock	
			szFile = szDir^".fileTableLock";
			LongPathToQuote(szFile, TRUE);
			RunProgram(szProgram, "/c del " + szFile, WAIT, SW_HIDE, -1, ExitCode);
		endif;
	endif;
end;

///////////////////////////////////////////////////////////////////////////////
//  EVENT:      Uninstalling event is sent just before files for the component:
//              CUBRID are removed during uninstallation. 
///////////////////////////////////////////////////////////////////////////////
 
export prototype CUBRID_UnInstalling();
function CUBRID_UnInstalling()
	STRING PROGRAM, szKeyTray, svNumValue, TARGET_PATH, TARGET_DIR;
	NUMBER nResult, nvType, nvSize;
begin
	Disable(LOGGING);
	szKeyTray = "Software\\Microsoft\\Windows\\CurrentVersion\\run";

	RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
	
	Delay(2);

	if RegDBGetKeyValueEx( szKeyTray, "CUBRID_Service_Tray" , nvType, svNumValue, nvSize ) >= 0 then
		RegDBDeleteValue( szKeyTray, "CUBRID_Service_Tray" );
	endif;	

	PROGRAM = TARGETDIR + "\\bin\\ctrlService.exe ";
	LongPathToQuote(PROGRAM, TRUE);
	if (LaunchAppAndWait (PROGRAM, "-u", WAIT) < 0) then 
//		MessageBox("Sorry, Fail to unregiste to NT Service", WARNING);
	endif;          

	PROGRAM = TARGETDIR + "\\bin\\setupManage.exe ";
	TARGET_PATH = TARGETDIR;
	LongPathToQuote(TARGET_PATH, TRUE);
	LongPathToQuote(PROGRAM, TRUE);	
	nResult = LaunchAppAndWait (PROGRAM,  " -d " + TARGET_PATH, WAIT );
	if nResult < 0 then
//		MessageBox ("Sorry, Fail to remove the path information.", WARNING);
	endif;

    RefreshEnvironment();
    
	Enable(LOGGING) ;

end;

///////////////////////////////////////////////////////////////////////////////
//  EVENT:      Installing event is sent just before files for the component: 
//              ODBC are transferred. 
///////////////////////////////////////////////////////////////////////////////
export prototype ODBC_Installing();
function ODBC_Installing()
	STRING szKey, szOldKey;
	NUMBER nResult;
begin
    // registry 
    if( CreateRegistrySet ("ODBC") < 0 ) then
		MessageBox (@SCRIPT_STR_0049,SEVERE);
	endif;

    // registry 
	szKey = "SOFTWARE\\ODBC\\ODBCINST.INI\\CUBRID Driver";
	RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);

	Disable(LOGGING);

	nResult = RegDBSetKeyValueEx(szKey, "DriverODBCVer", REGDB_STRING, ODBC_VERSION , -1);
	
	Enable(LOGGING);

end;

export prototype OLEDB_Installed();
function OLEDB_Installed()
	STRING PROGRAM;
begin
	PROGRAM = TARGETDIR + "\\bin\\CUBRIDProvider.dll";
	LongPathToQuote (PROGRAM, TRUE);
	if(LaunchAppAndWait("regsvr32.exe", "/s " + PROGRAM, WAIT) < 0)then
		MessageBox(@SCRIPT_STR_0051, WARNING);
	endif;
end;

export prototype OLEDB_UnInstalling();
function OLEDB_UnInstalling()
	STRING PROGRAM;
begin
	PROGRAM = TARGETDIR + "\\bin\\CUBRIDProvider.dll";
	LongPathToQuote(PROGRAM, TRUE);
	if(LaunchAppAndWait("regsvr32.exe", "/s /u " + PROGRAM, WAIT) < 0)then
		MessageBox(@SCRIPT_STR_0050, WARNING);
	endif;
end;
