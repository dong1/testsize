
////////////////////////////////////////////////////////////////////////////////
//                                                                            
//  IIIIIII SSSSSS                                                            
//    II    SS                          InstallShield (R)                     
//    II    SSSSSS      (c) 1996-2000, InstallShield Software Corporation     
//    II        SS      (c) 1990-1996, InstallShield Corporation              
//  IIIIIII SSSSSS                     All Rights Reserved.                   
//                                                                            
//                                                                            
//  This code is generated as a starting setup template.  You should   
//  modify it to provide all necessary steps for your setup.
//                                                                            
//                                                                            
//    File Name:  Setup.rul                                                   
//                                                                            
//  Description:  InstallShield script                                        
//                                                                            
//     Comments:  This template script performs a basic setup. With minor           
//                modifications, this template can be adapted to create       
//                new, customized setups.
//
////////////////////////////////////////////////////////////////////////////////


// Include header files
    
#include "ifx.h" //DO NOT REMOVE 
////////////////////// string defines ////////////////////////////

//////////////////// installation declarations ///////////////////

// ----- DLL function prototypes -----


    // your DLL function prototypes

#include "../../../version.h"

// ---- script function prototypes -----
prototype   BOOL USER.SendMessageTimeout(HWND, SHORT, SHORT, POINTER, SHORT, SHORT, POINTER);
prototype   BOOL Shell32.SHGetSpecialFolderPathA(HWND,BYREF STRING , NUMBER, BOOL);

// CodePage 확인을 위해 Kernel32.dll로 부터 GetACP()를 Import
prototype NUMBER Kernel32.GetACP();

// your script function prototypes
prototype RefreshEnvironment();
prototype makeconf(STRING);

// your global variables
STRING  nSetupType;
STRING  szTextDeskTopIcon, szTextQuickLaunchIcon, szTextStartMenuIcon;
NUMBER  nvCheckDeskTopIcon, nvCheckQuickLaunchIcon, nvCheckStartMenuIcon;
STRING  szVersionName, szVersionName1, szVersionName2;
LIST    szVersionList;
BOOL    cp_old_dbtxt;
BOOL    remove_completely, old_conf;
// CodePage 체크를 위한 Global variable 선언
NUMBER  nvCodePage;

//#define HWND_BROADCAST        0xFFFF
#define WM_SETTINGCHANGE      0x001A
#define SMTO_ABORTIFHUNG      0x0002

#define SD_AGREE				14
#define SD_DISAGREE				15
#define SD_CUSTOM_LICENSE                 104
#define	ST_CUBRID_VERSION		@PRODUCT_VERSION
#define ODBC_VERSION            @PRODUCT_VERSION

#ifndef STILL_ACTIVE
	#define STILL_ACTIVE    0x00000103
#endif

prototype RunProgram(STRING, STRING, NUMBER, NUMBER, NUMBER, BYREF NUMBER);
prototype BOOL kernel32.CreateProcessA(POINTER, BYVAL STRING, POINTER, 
               POINTER, BOOL, NUMBER, POINTER, POINTER, POINTER, 
               POINTER);
prototype BOOL kernel32.GetExitCodeProcess(NUMBER, POINTER);
prototype NUMBER kernel32.WaitForSingleObject(NUMBER, NUMBER);
prototype BOOL kernel32.CloseHandle(HWND);

function RunProgram(szProgram, szCmdLine, nWait, nShow, nTimeOut, nvExitCode)
    STARTUPINFO siData;
    PROCESS_INFORMATION piData;
begin
   	siData.cb = 68;
	siData.lpReserved = NULL;
	siData.lpDesktop = NULL;
	siData.lpTitle = NULL;
	siData.dwX = 0;
	siData.dwY = 0;
	siData.dwXSize = 0;
	siData.dwYSize = 0;
	siData.dwXCountChars = 0;
	siData.dwYCountChars = 0;
	siData.dwFillAttribute = 0;
	siData.dwFlags = 1;
	siData.wShowWindow = nShow;
	siData.lpReserved2 = NULL;
	siData.hStdInput = NULL;
	siData.hStdOutput = NULL;
	siData.hStdError = NULL;

    if (CreateProcessA(NULL, szProgram + " " + szCmdLine, NULL, NULL,
                       TRUE, 0, NULL, NULL, &siData, &piData) = 0) then
       return (-1);
    endif;

	if ( nWait != WAIT ) then
       nvExitCode = 0;
       return 0;
	endif;
	
    WaitForSingleObject(piData.hProcess, nTimeOut);

    GetExitCodeProcess(piData.hProcess, &nvExitCode);

    CloseHandle(piData.hProcess);
    CloseHandle(piData.hThread);    

    return 0;
end;

function OnMaintUIBefore()
	STRING svResult, szCaption, PROGRAM, szMsg;
	NUMBER nResult, nType, nvSize, ExitCode;
	STRING unInstallString, szKey, szNale, szName;
begin    
    //Maintenance Mode
   	nResult = StrFind(CMDLINE, "CUB_UNINSTALL");

    // 현재 System의 Code page를 가져온다.
    nvCodePage = GetACP();
   	
  	if (nResult < 0) then
  		MessageBox(@SCRIPT_STR_0001, SEVERE); 
        exit;
	endif;	
	
	svResult = SdLoadString(IFX_MAINTUI_MSG);
	szCaption = SdLoadString(IFX_ONMAINTUI_CAPTION);
	nResult = SprintfBox(MB_OKCANCEL,szCaption,"%s",svResult);
	remove_completely = FALSE;
	
	if (nResult = IDOK) then 
	    szMsg = @SCRIPT_STR_0002;
	    szCaption = @SCRIPT_STR_0003;
	    nResult = SprintfBox(MB_YESNO, szCaption, "%s", szMsg);
	    if (nResult = IDYES) then
			remove_completely = TRUE;
  		endif;

		SetStatusWindow(0, "");
		Enable(STATUSEX);
		StatusUpdate(ON, 100);
		FeatureRemoveAll();		
	else
		exit;		
	endif;
end;

function OnMaintUIAfter()
	STRING restart_source_path;
	STRING setupfilecopy_program, setupfilecopy_source, setupfilecopy_target;
	int	   ExitCode;
	BOOL   bOpt1, bOpt2;
begin
	RunProgram(WINSYSDIR + "\\cmd.exe", " /c RD /S /Q " + TARGETDIR ^ "tmp", WAIT, SW_HIDE, -1, ExitCode) ;
	RunProgram(WINSYSDIR + "\\cmd.exe", " /c RD /S /Q " + TARGETDIR ^ "var", WAIT, SW_HIDE, -1, ExitCode) ;
	RunProgram(WINSYSDIR + "\\cmd.exe", " /c RD /S /Q " + TARGETDIR ^ "log", WAIT, SW_HIDE, -1, ExitCode) ;
	RunProgram(WINSYSDIR + "\\cmd.exe", " /c RD /S /Q " + TARGETDIR ^ "cubridmanager", WAIT, SW_HIDE, -1, ExitCode) ;
	RunProgram(WINSYSDIR + "\\cmd.exe", " /c RD /S /Q " + TARGETDIR ^ "doc", WAIT, SW_HIDE, -1, ExitCode) ;
   
	if (remove_completely = TRUE) then
		RunProgram(WINSYSDIR + "\\cmd.exe", " /c RD /S /Q " + TARGETDIR^"conf", WAIT, SW_HIDE, -1, ExitCode) ;
		RunProgram(WINSYSDIR + "\\cmd.exe", " /c RD /S /Q " + TARGETDIR^"databases", WAIT, SW_HIDE, -1, ExitCode) ;
	endif;
	
	DeleteProgramFolder ("CUBRID");
	RunProgram(WINSYSDIR + "\\cmd.exe", " /c RD /Q " + TARGETDIR, WAIT, SW_HIDE, -1, ExitCode) ;
   	SdFinish("", @SCRIPT_STR_0004, "", "", "", bOpt1, bOpt2);
end;

//////////////////////////////////////////////////////////////////////////////
//                                                                           
//  FUNCTION:   OnFirstUIBefore                                            
//                                                                           
//  EVENT:      FirstUIBefore event is sent when installation is run for the first
//              time on given machine. In the handler installation usually displays
//              UI allowing end user to specify installation parameters. After this
//              function returns, ComponentTransferData is called to perform file
//              transfer.
//                                                                           
///////////////////////////////////////////////////////////////////////////////
function OnFirstUIBefore()
    NUMBER  nResult;
    STRING  szTitle, szMsg, szSummaryMsg;
    STRING  szLicenseFile, szQuestion;
    STRING  szTargetPath;
    STRING  szDir, PROGRAM;
    STRING  szfolder, szTarget;
    STRING  szComponents, szTargetdir;
    STRING  szValue, szPath, svResult;
    NUMBER  nLevel, ExitCode;
    LIST    listStartCopy;
    NUMBER  nvSize, nvType;

    NUMBER	nVS, nUniSQL, nUniCAS, nEMSServer, nEMSClient;

	STRING 	szName, szCompany, szSerial;   
	NUMBER nReserved;
	BOOL    bNKey;
	BOOL jvm_fail;
	BOOL javaw_fail;
	STRING ordblist_txt;
	STRING java_msg, svValue, szKey, szKey_sp1, regJavaLibTarget, regTemp;
begin	
    // TO DO: if you want to enable background, window title, and caption bar title
    // SetTitle( @TITLE_MAIN, 24, WHITE );
    // SetTitle( @TITLE_CAPTIONBAR, 0, BACKGROUNDCAPTION );
    // Enable( FULLWINDOWMODE );
    // Enable( BACKGROUND );
    // SetColor(BACKGROUND,RGB (0, 128, 128));
	// Set Initial value

	UNINSTALL_STRING = UNINSTALL_STRING + " CUB_UNINSTALL";
	nvCheckDeskTopIcon = TRUE;
	nvCheckQuickLaunchIcon = FALSE;
	nvCheckStartMenuIcon = TRUE;
/*		
	szVersionList = ListCreate(STRINGLIST);
    StrGetTokens(szVersionList, @PRODUCT_VERSION, ".");
    ListGetFirstString(szVersionList, szVersionName1);
    ListGetNextString(szVersionList, szVersionName2);
    szVersionName = szVersionName1 + "." + szVersionName2;
    ListDestroy(szVersionList);	    
*/
    szVersionName = @PRODUCT_VERSION;    
    // 현재 System의 Code page를 가져온다.
    nvCodePage = GetACP();
    
Dlg_Start:
    // beginning of dialogs label
    TARGETDIR = "C:\\CUBRID";
    szDir = TARGETDIR;
    SHELL_OBJECT_FOLDER = @FOLDER_NAME;

Dlg_SdWelcome:
    szTitle = "CUBRID " + ST_CUBRID_VERSION + " for Windows";       
    szMsg = @SCRIPT_STR_0005;                                
    StrReplace(szMsg, "TOKEN", ST_CUBRID_VERSION, 0);

    nResult = SdWelcome( szTitle, szMsg );
    if (nResult = BACK) goto Dlg_Start;

Dlg_SdAskDestPath: 
    SetDialogTitle (DLG_ASK_PATH, @SCRIPT_STR_0006);
    szMsg = @SCRIPT_STR_0007;

    if ( AskPath( szMsg, TARGETDIR, szTarget ) = BACK ) then
       if (bNKey) then 
          goto Dlg_SdAskDestPath;
       else 
          goto Dlg_SdWelcome;
       endif;
    endif;

    if (szTarget % " ") then
        MessageBox(@SCRIPT_STR_0008, SEVERE);
    	TARGETDIR = szTarget;
    	goto Dlg_SdAskDestPath;
    endif;

    if (ExistsDir (szTarget) = EXISTS) then
	   	szMsg = @SCRIPT_STR_0009;
	   	
	   	if (AskYesNo (szMsg, NO) = NO) then
          szMsg = "";
          goto Dlg_SdAskDestPath;  
        endif;
    else 
    	if (CreateDir (szTarget) < 0) then
			MessageBox (szTarget + @SCRIPT_STR_0010, SEVERE);
        	goto Dlg_SdAskDestPath;        
        endif;
    endif;
    
    TARGETDIR = szTarget;
    szDir = TARGETDIR;
    SHELL_OBJECT_FOLDER = @FOLDER_NAME;             

Dlg_SdLicense:                               
   	szLicenseFile = SUPPORTDIR ^ "license.txt";
    szTitle    = "CUBRID " + ST_CUBRID_VERSION + "  " + @SCRIPT_STR_0011;
   	szMsg      = @SCRIPT_STR_0012;
    
	szQuestion = "";
	nResult = SdLicense2(szTitle, @SCRIPT_STR_0013, @SCRIPT_STR_0014, szLicenseFile, FALSE);
    if (nResult = BACK) goto Dlg_SdAskDestPath;

Dlg_SetupType:
   	nvSize = 0;

	// if windows가 95, 98, ME 버젼이면 대화상자 보여주고 다음 단계로 넘어간다.
	if (SYSINFO.WIN9X.bWin9X) then
		MessageBox(@SCRIPT_STR_0015, WARNING);
		nSetupType = "CLIENT_ONLY";
		FeatureSetupTypeSet(MEDIA, "CLIENT_ONLY");

		// 공간 확인...		
	    FeatureCompareSizeRequired(MEDIA,TARGETDIR,nvSize);

	    if (nvSize != 0) then
         	MessageBox( szSdStr_NotEnoughSpace, WARNING );
	        goto Dlg_SdAskDestPath;
        endif;		
	else
		nSetupType = "ALL";
		szTitle    = "CUBRID " + ST_CUBRID_VERSION + " " + @SCRIPT_STR_0017;
   		szMsg      = @SCRIPT_STR_0018;

	    nResult = SdSetupTypeEx ( szTitle , szMsg , "" , nSetupType , 0 );

	    if (nResult = BACK) then
        	goto Dlg_SdLicense;
        endif;

	    FeatureCompareSizeRequired(MEDIA,TARGETDIR,nvSize);

	    if (nvSize != 0) then
         	MessageBox( szSdStr_NotEnoughSpace, WARNING );
	        goto Dlg_SetupType;
        endif;
    endif;

    if (nSetupType = "ALL") then
    	szSummaryMsg = @SCRIPT_STR_0019;
   	else                         
    	szSummaryMsg = @SCRIPT_STR_0020;
   	endif;
  
    szMsg = @SCRIPT_STR_0021;
    StrReplace(szMsg, "TOKEN", ST_CUBRID_VERSION, 0);
    
    szTitle = @SCRIPT_STR_0022;
    
	nResult = SprintfBox(MB_YESNO, szTitle, "%s", szMsg);

	if (nResult == IDNO) then
   		goto Dlg_SetupType;
   	endif;

Dlg_AskShortcutPath:
	szTitle = @SCRIPT_STR_0023;
	szMsg = @SCRIPT_STR_0024;
	szTextDeskTopIcon = @SCRIPT_STR_0025;
	szTextQuickLaunchIcon = @SCRIPT_STR_0026;
	szTextStartMenuIcon = @SCRIPT_STR_0027;
	
	SetDialogTitle(DLG_ASK_OPTIONS, szTitle);

 	nResult = AskOptions (NONEXCLUSIVE, szMsg,
						szTextDeskTopIcon, nvCheckDeskTopIcon,
						szTextQuickLaunchIcon, nvCheckQuickLaunchIcon,
						szTextStartMenuIcon, nvCheckStartMenuIcon);

	if (nResult = BACK) then
		if (SYSINFO.WIN9X.bWin9X) then
			goto Dlg_SdLicense; 
		else
			goto Dlg_SetupType;
		endif;
	endif;

Dlg_SdStartCopy:
	if ( nvCodePage = 949 ) then
	   	szTitle = "CUBRID " + ST_CUBRID_VERSION + " " + @SCRIPT_STR_0028;
	else
    	szTitle = @SCRIPT_STR_0028 + " CUBRID " + ST_CUBRID_VERSION;
	endif;
    //The following is an example of how to add a string(svName) to a list(listStartCopy).
    //eg. ListAddString(listStartCopy,svName,AFTER);
    listStartCopy = ListCreate( STRINGLIST );

	ListAddString(listStartCopy, @SCRIPT_STR_0029 + TARGETDIR, AFTER);
	ListAddString(listStartCopy, szSummaryMsg, AFTER);
	ListAddString(listStartCopy, @SCRIPT_STR_0030, AFTER);

	// Add short cut icon information that will be added.
	if (nvCheckDeskTopIcon = TRUE) then
		ListAddString(listStartCopy, "   " + @SCRIPT_STR_0025, AFTER);
	endif;
			
	if (nvCheckQuickLaunchIcon = TRUE) then
		ListAddString(listStartCopy, "   " + @SCRIPT_STR_0026, AFTER);
	endif;
			
	if (nvCheckStartMenuIcon = TRUE) then
		ListAddString(listStartCopy, "   " + @SCRIPT_STR_0027, AFTER);
	endif;	  

    nResult = SdStartCopy( szTitle, "", listStartCopy );

    if (nResult = BACK) goto Dlg_AskShortcutPath;
  
    ListDestroy(listStartCopy);

    REGDB_OPTIONS = REGDB_OPTIONS | REGDB_OPTION_WOW64_64KEY;

	/* check if 2008 redistributable is installed */
	// 1. check registry key(redistributable)      
	nvType = REGDB_STRING;
	szValue = "";

	// 2. check System is 64bit OS
	if (SYSINFO.bIsWow64) then
	  if ( nvCodePage = 949 ) then
		  szKey = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\{484D36AC-327E-390E-85C8-9F2B176BA2B6}";
		  szKey_sp1 = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\{92B8FD1F-C1AE-3750-8577-631B0AA85DF5}";
	  else
		  szKey = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\{350AA351-21FA-3270-8B7A-835434E766AD}";
		  szKey_sp1 = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\{8220EEFE-38CD-377E-8595-13398D740ACE}";
	  endif;
	else
	  if ( nvCodePage = 949 ) then
		  szKey = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\{9B775AA1-7B10-379A-9B16-7E373790568C}";
		  szKey_sp1 = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\{887868A2-D6DE-3255-AA92-AA0B5A59B874}";
	  else
		  szKey = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\{FF66E9F6-83E7-3A3E-AF14-8DE9A809A6A4}";
		  szKey_sp1 = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\{9A25302D-30C0-39D9-BD6F-21E6EC160475}";
	  endif;
	endif;

	RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
	nResult = RegDBGetKeyValueEx (szKey, "DisplayVersion", nvType, szValue, nvSize);
	if (nResult < 0) then
		nResult = RegDBGetKeyValueEx (szKey_sp1, "DisplayVersion", nvType, szValue, nvSize);
		
		if (nResult < 0) then
			szTitle = @SCRIPT_STR_0034;
			szMsg = @SCRIPT_STR_0035;

			nResult = SprintfBox(MB_YESNO, szTitle, "%s", szMsg);
			if (nResult = IDYES) then
				abort;
			endif;
		endif;
	endif;

    /* check if jvm is installed */
    if (RunProgram("javaw.exe", "", WAIT, SW_HIDE, -1, ExitCode) < 0) then
		szMsg = @SCRIPT_STR_0036;
        MessageBox (szMsg, INFORMATION); 
    endif;

    szPath = TARGETDIR^"conf";
    LongPathToQuote (szPath, TRUE);
       
    if (FindFile ( szPath, "cubrid.conf", svResult ) = 0) then
      old_conf = TRUE;
    elseif (FindFile ( szPath, "cubrid_broker.conf", svResult ) = 0) then
      old_conf = TRUE;      
    elseif (FindFile ( szPath, "cm.conf", svResult ) = 0) then
      old_conf = TRUE;
    elseif (FindFile ( szPath, "cm.pass", svResult ) = 0) then
      old_conf = TRUE;
    elseif (FindFile ( szPath, "cmdb.pass", svResult ) = 0) then
      old_conf = TRUE;
    endif;
     
    if (old_conf = TRUE) then
	    szTitle = @SCRIPT_STR_0031;
	    szMsg = @SCRIPT_STR_0037;
	    
		nResult = SprintfBox(MB_YESNO, szTitle, "%s", szMsg);
	    if (nResult = IDNO) then
	      old_conf = FALSE;
	    endif;
	endif;

    // setup default status
    SetStatusWindow(0, "");
    Enable(STATUSEX);
    StatusUpdate(ON, 100);

    return 0;
end;

///////////////////////////////////////////////////////////////////////////////
//
//  FUNCTION:   OnMoving
//
//  EVENT:      Moving event is sent when file transfer is started as a result of
//              ComponentTransferData call, before any file transfer operations 
//              are performed.
//
///////////////////////////////////////////////////////////////////////////////
function OnMoving()
    STRING szAppPath;
    STRING szProgramFolder; 
begin
    // Set LOGO Compliance Application Path 
    // TO DO : if your application .exe is in a subfolder of TARGETDIR then add subfolder 
    szProgramFolder = FOLDER_PROGRAMS^"CUBRID";
    
    szAppPath = TARGETDIR;
    RegDBSetItem(REGDB_APPPATH, szAppPath);
    RegDBSetItem(REGDB_APPPATH_DEFAULT, szAppPath ^ @PRODUCT_KEY);
    if (!MAINTENANCE) then
        if (nvCheckStartMenuIcon = TRUE) then
            szAppPath = UNINSTALL_STRING;
            AddFolderIcon( szProgramFolder, "Uninstall CUBRID", szAppPath, "", "", 0, "", REPLACE);
        endif;
    endif;
end;
 
function OnFileLocked(szFile)
	STRING msg;
	int	   nResult;
begin
	if (ExistsDir(szFile) == EXISTS) then // 디렉토리일때
		return ERR_IGNORE;
	else                                  // 파일일때
		msg = @SCRIPT_STR_0038;
		StrReplace(msg, "TOKEN", szFile, 0);
		
		if (AskYesNo (msg, YES) = NO) then
		    msg = @SCRIPT_STR_0039;
            MessageBox(msg, WARNING);
       		exit;
       else
            return ERR_RETRY;
       endif;
	endif;
end;

 
///////////////////////////////////////////////////////////////////////////////
//
//  FUNCTION:   OnFirstUIAfter
//
//  EVENT:      FirstUIAfter event is sent after file transfer, when installation 
//              is run for the first time on given machine. In this event handler 
//              installation usually displays UI that will inform end user that
//              installation has been completed successfully.
//
///////////////////////////////////////////////////////////////////////////////
function OnFirstUIAfter()
	//-------------------------------
	  #define WM_WININICHANGE 0x001A
	 
	  STRING szKey, szEnv;
	  POINTER pEnv;
	
	//-------------------------------   
	
	STRING szTitle, szMsg1, szMsg2, szOption1, szOption2,szTemp,szMsg, szTemp_host ;
	NUMBER bOpt1, bOpt2,nOption, nReserved;       
	NUMBER  nvFileHandle;  
	//NUMBER  nvHostkey;   
	NUMBER  nvHostkey;  
	STRING  stTARGETDIR;        
	
	STRING  svResult ;    
	STRING  szHostKeyTitle, szKeyTray ;
	    
	STRING  szQuestion ,svValue, svNumValue;
	NUMBER  lResult, lCount ,nAppDataCISDL, ExitCode;
	NUMBER  nResult,nResult1,nResult2,nResult3,nResult4,nResult5 ,nvSize,nvType  ;    
	STRING  PROGRAM , tmpTARGET, szProgramVSQL, szProgramEMC, szProgramQA, szAppDataPath, szQuickLaunchPath;
	STRING  szFolderQA, szQATarget;
	STRING  szDocCUBRIDManual;
	STRING  szDocTempFolder, szServiceTray;
	STRING  setupfilecopy_program, setupfilecopy_param;

	STRING  szValue;
	NUMBER  nSize;
begin
   szTitle = "";
   nOption   = SYS_BOOTMACHINE;
   szMsg2    = "Click Finish to exit %P setup.";
   nReserved = 0;
   
   if (SYSINFO.WINNT.bWin2000 = FALSE) then
   		PROGRAM = TARGETDIR + "\\bin\\dbghelp.dll";
		LongPathToQuote(PROGRAM, TRUE);
		LaunchAppAndWait(WINSYSDIR + "\\cmd.exe", " /c del " + PROGRAM, WAIT) ;
   endif;

Dlg_Completed:
	// Make ShortCut icon
    szProgramEMC = TARGETDIR^"\\cubridmanager\\cubridmanager.exe";
	szProgramQA = TARGETDIR^"\\doc\\Q&A.lnk";
	szQATarget = WINSYSDIR + "\\Q&A.lnk";

    LongPathToQuote( szProgramEMC, TRUE );
    LongPathToQuote( szProgramQA, TRUE);
	LongPathToQuote( szQATarget, TRUE);

	CopyFile(szProgramQA, szQATarget);

	if (nvCheckDeskTopIcon = TRUE) then
		AddFolderIcon(FOLDER_DESKTOP, "CUBRID Manager Client", szProgramEMC,  TARGETDIR^"\\cubridmanager", "", 0, "", REPLACE );
	endif;
	
	Delay(1);
	
	if (nvCheckQuickLaunchIcon = TRUE) then
        UseDLL(WINSYSDIR ^ "Shell32.dll");

	    nAppDataCISDL=26;
	    if (SHGetSpecialFolderPathA(0, szAppDataPath, nAppDataCISDL,0)= TRUE) then
	    	szQuickLaunchPath=szAppDataPath^"Microsoft\\Internet Explorer\\Quick Launch";
        	AddFolderIcon(szQuickLaunchPath,"CUBRID Manager Client",szProgramEMC,TARGETDIR^"\\cubridmanager","",0,"",REPLACE);
        else
        	MessageBox(@SCRIPT_STR_0041, WARNING);
    	endif;

    	UnUseDLL(WINSYSDIR ^ "Shell32.dll");

	endif;
	
	Delay(1);
		
	if (nvCheckStartMenuIcon = TRUE) then
		nResult = CreateShellObjects( "" );

		szDocTempFolder = "CUBRID";
		CreateProgramFolder(szDocTempFolder);
					
		szDocCUBRIDManual = TARGETDIR^"\\\cubridmanager\\plugins\\com.cubrid.cubridmanager.help_"
		                    + VERSION_STRING;
		if ( nvCodePage = 949 ) then
			szDocCUBRIDManual = szDocCUBRIDManual + "\\nl\\ko\\KR";
		endif;
		
		szDocCUBRIDManual = szDocCUBRIDManual + "\\html\\index.htm";
		
		LongPathToQuote( szDocCUBRIDManual, TRUE);
		AddFolderIcon (szDocTempFolder, "CUBRID Manual", szDocCUBRIDManual , TARGETDIR^"\\doc", "", 0, "", REPLACE);
		AddFolderIcon (TARGETDIR^"\\doc", "CUBRID Manual", szDocCUBRIDManual , TARGETDIR^"\\doc", "", 0, "", REPLACE);

		if (nSetupType = "ALL") then
			szServiceTray = TARGETDIR^"\\bin\\CUBRID_Service_Tray.exe";
			LongPathToQuote( szServiceTray, TRUE);
			AddFolderIcon(szDocTempFolder, "CUBRID Service Tray", szServiceTray, TARGETDIR^"\\bin" , "", 0, "", REPLACE );
		endif;

		AddFolderIcon( szDocTempFolder,"CUBRID Manager Client", szProgramEMC, TARGETDIR^"\\cubridmanager", "", 0, "", REPLACE );
    endif;
    
	Delay(1);
	
	SdFinish(szTitle, "", "", "", "", bOpt1, bOpt2);

	if ( nvCodePage = 949 ) then
		nvType = REGDB_STRING;
		szValue = "";
		nSize = -1;
		RegDBSetDefaultRoot(HKEY_CLASSES_ROOT);
		nResult = RegDBGetKeyValueEx ("http\\shell\\open\\command", "", nvType, szValue, nSize);
		if ( nResult < 0 ) then
			RunProgram(PROGRAMFILES^"Internet Explorer\\iexplore.exe","http://www.cubrid.com/developer.cub", NOWAIT, SW_SHOW, -1, ExitCode);
		else
			RunProgram(szValue,"http://www.cubrid.com/developer.cub", NOWAIT, SW_SHOW, -1, ExitCode);
		endif;
	endif;

    if (nSetupType = "ALL") then
		// 인스톨후 CUBRID Service Tray 를 실행.
		PROGRAM = TARGETDIR + "\\bin\\CUBRID_Service_Tray.exe";
		LongPathToQuote (PROGRAM, TRUE);
		LaunchAppAndWait (PROGRAM, "", NOWAIT);
		
		PROGRAM = TARGETDIR + "\\bin\\ctrlService.exe";
		LongPathToQuote (PROGRAM, TRUE);
		LaunchAppAndWait (PROGRAM, "-start", NOWAIT);
	endif;
	
    REGDB_OPTIONS = REGDB_OPTIONS & ~REGDB_OPTION_WOW64_64KEY;
    return 0;
end;

function RefreshEnvironment()
	STRING      sParam;
	POINTER     pParam, pResult;
	LONG        lResult;
begin
	sParam      = "Environment";
	pParam      = &sParam;
	pResult     = &lResult;

	if (!SendMessageTimeout(HWND_BROADCAST, WM_WININICHANGE, 0, pParam, SMTO_ABORTIFHUNG, 300, pResult))
	then
//		MessageBox("failed...", SEVERE);
//		SprintfBox(WARNING, "", "SendMessageTimeout failed in RefreshEnvironment, Error %d", GetLastError());
	endif;
end;  

function makeconf(conffile)
	STRING  confcopy_program, conffilename, distfilename, versionfilename;
	STRING  cmd_arg;
	int	   ExitCode;
begin
	confcopy_program = SRCDIR^"\\makeconf.bat";
	conffilename = conffile;
	distfilename = conffilename+"-dist";
	versionfilename = conffilename + "."+szVersionName;
	
	LongPathToQuote(confcopy_program, TRUE);	
	LongPathToQuote(conffilename, TRUE);
	LongPathToQuote(distfilename, TRUE);
	LongPathToQuote(versionfilename, TRUE);
	cmd_arg = conffilename + " " + distfilename + " " + versionfilename;

    if (old_conf) then
    	cmd_arg = cmd_arg + " TRUE";
    else
    	cmd_arg = cmd_arg + " FALSE";
    endif;
    
    RunProgram(confcopy_program, cmd_arg, WAIT, SW_HIDE, -1, ExitCode);
end;
//---------------------------------------------------------------------------
// OnSetUpdateMode
//
// OnSetUpdateMode is called directly by the framework to set the UPDATEMODE
// InstallShield system variable appropriately to control which UI events
// are called by OnShowUI.
//
// Note: This event is called for all setups.
//---------------------------------------------------------------------------
function OnSetUpdateMode()
	number	nIgnore, nMediaFlags, nInstalledVersion, nUpdateVersion, nResult;
	string	szVersion, szIgnore, szMsg;
begin	
	UPDATEMODE = FALSE; // Non-update mode by default.
end;
#include "ComponentEvents.rul"
