#!/bin/sh
###############################################################################
#  Script Name : repl_change_param
#
#  Overview 
#
#  Using this script, the user can change the parameters of replication.
#
#  If the user doesn't designate the parameter name using -n option, 
#  this script runs as interactive mode.
#  
#  NOTE : Under the MT Not safe version, the distributor database would be
#         created per slave database, and the row count of slave_info class
#         of the distributor database would be 1. So, the user may not to 
#         provide the slave_db_name as an input parameter of this script. 
#         If the MT safe version is provided, the slave_db_name would be
#         a mandatory input parameter of this script.
#
#
###############################################################################

###############################################################################
# function : print out usage info
###############################################################################
usage() {
  exec_name=`basename $0`
  echo "usage: $exec_name master_db_name slave_db_name dist_db_name [-p passwd] [-n parameter_name -v parameter_value] [--help]" 1>&2
  if [ $1 = 1 ]
  then
    exit 1
  fi
}

full_usage() {
  exec_name=`basename $0`
  echo "Usage: $exec_name MASTER_DB_NAME SLAVE_DB_NAME DIST_DB_NAME [Options]" 1>&2
  echo "Change some parameter for CUBRID replication " 1>&2
  echo "" 1>&2
  echo "Mandatory arguments:" 1>&2
  echo "  MASTER_DB_NAME Database name for Master DB" 1>&2
  echo "  SLAVE_DB_NAME Database name for Slave DB" 1>&2
  echo "  DIST_DB_NAME Database name for Distribution DB" 1>&2
  echo "" 1>&2
  echo "Options:" 1>&2
  echo "  -p DBA password" 1>&2
  echo "  -n <parameter name> Supported parameters are as below" 1>&2
  echo "     When omit this parameter, interactive mode is activated" 1>&2
  echo "  -v <value> Set the parameter value" 1>&2
  echo "  --help This output" 1>&2
  echo "" 1>&2
  echo "Supported parameter lists:" 1>&2
  echo "  1. perf_poll_interval preformance polling interval(sec) (10~60), default: 10 " 1>&2
  echo "  2. size_of_log_buffer log buffer size of repl_agent (100~1000), default: 500 " 1>&2
  echo "  3. size_of_cache_buffer cache buffer size of the repl_agent (100~500), default: 100 " 1>&2
  echo "  4. size_of_copylog page count of the copy log (1000~10000), default: 5000 " 1>&2
  echo "  5. index_replication 'y' for index replication (y/n), default: 'n' " 1>&2
  echo "  6. for_recovery 'y' for recovery mode (y/n), default: 'n' " 1>&2
  echo "  7. log_apply_interval interval between log page fetches(sec) (0~600), default: 0 " 1>&2
  echo "  8. restart_interval interval between connections to the slave(sec) (1~60), default: 100" 1>&2
  echo "" 1>&2
  exit 1
}

###############################################################################
# function : print message
###############################################################################
print_mes_h() {
  case $1 in
    INTER_MES)
      echo         
      echo "        1. perf_poll_interval         - 복제 지연시간을 측정하는 단위(초)"
      echo "        2. size_of_log_buffer         - 복제에이전트의 로그버퍼 크기(페이지)"
      echo "        3. size_of_cache_buffer       - 복제에이전트의 복제로그버퍼 크기(페이지)"
      echo "        4. size_of_copylog            - 복제로그의 페이지 수"
      echo "        5. index_replication          - 인덱스 복제 여부"
      echo "        6. for_recovery               - 마스터 교체용 복제 여부"
      echo "        7. log_apply_interval         - 복제 수행 주기(초)"
      echo "        8. restart_interval           - 슬레이브 재접속 주기(초)"
      echo
      ;;
    GET_VALUE)
      printf "        >> $2 값 ($3 ~ $4) >> "
      ;;
    GET_YN)
      printf "        >> $2 값 (y or n) >> "
      ;;
    PARAM_NUM)
      printf "   -- 변경하고자 하는 파라미터 번호 (q - 중지) >> "
      ;;
    SUCCESS)
      echo "          파라미터가 정상적으로 변경되었습니다."
      ;;
  esac
}

print_mes_e() {
  case $1 in
    INTER_MES)
      echo
      echo "        1. perf_poll_interval         - preformance polling interval(sec)"
      echo "        2. size_of_log_buffer         - log buffer size of repl_agent"
      echo "        3. size_of_cache_buffer       - cache buffer size of the repl_agent"
      echo "        4. size_of_copylog            - page count of the copy log"
      echo "        5. index_replication          - 'y' for index replication"
      echo "        6. for_recovery               - 'y' for recovery mode"
      echo "        7. log_apply_interval         - interval between log page fetches(sec)" 
      echo "        8. restart_interval           - interval between connections to the slave(sec)"
      echo
      ;;
    GET_VALUE)
      printf "        >> The value of $2 : ($3 ~ $4) >> "
      ;;
    GET_YN)
      printf "        >> The value of $2 : (y or n) >> "
      ;;
    PARAM_NUM)
      printf "  -- Parameter Number to be changed (q - quit ) >> "
      ;;
    SUCCESS)
      echo "         The target parameter was changed successfully."
      ;;
  esac
}

print_mes() {
  if [ "$kor_yn" = "yes" ]
  then
    print_mes_h $1 $2 $3 $4
  else
    print_mes_e $1 $2 $3 $4
  fi
}

###############################################################################
# function :  for processing error cases, clear all the temporary files
###############################################################################
print_error_h() {
  case $1 in
    no_msg)
      ;;
    err_check_env)
      printf " << ERROR >> 환경 변수 설정을 확인하시기 바랍니다."
      echo "$2"
      ;;
    err_undefined_param)
      echo " << ERROR >>  $param_name은 정의되지 않은 파라미터입니다."
      ;;
    err_get_int_value)
      echo " << ERROR >>  $2 은 $3과 $4 사이의 정수가 입력되어야 합니다."
      ;;
    err_get_yn)
      echo " << ERROR >> index_replication은 y 또는 n가 입력되어야 합니다."
      ;;
    err_general)
      echo " << ERROR >> 파라미터 변경 중 오류가 발생하였습니다."
      ;;
  esac
}

print_error_e() {
  case $1 in
    no_msg)
      ;;
    err_check_env)
      printf " << ERROR >> Check the environment variable."
      echo "$2"
      ;;
    err_undefined_param)
      echo " << ERROR >> Undefined parameter - $param_name"
      ;;
    err_get_int_value)
      echo " << ERROR >>  $2 should be integer value between $3 and $4 "
      ;;
    err_get_yn)
      echo " << ERROR >> $2  should be set as  y or n"
      ;;
    err_general)
      echo " << ERROR >>  Error during changing parameters .."
      ;;
  esac
}

print_error() {
  if [ "$kor_yn" = "yes" ]
  then
    print_error_h $2 $3 $4 $5
  else
    print_error_e $2 $3 $4 $5
  fi
  usage 0
  echo
  sql=
  if [ $1 = 1 ]
  then
    exit 1
  fi
}

change_param() {
  case  $1 in
    1)
      if [ -z "$param_val" ]
      then
        print_mes GET_VALUE perf_poll_interval 10 60
        read param_val
      else
        param_val=$2
      fi
      if [ -z "$param_val" ]
      then
        print_error 0 err_get_int_value perf_poll_interval 10 60
      elif [ $param_val -ge 10 -a $param_val -le 60 ]
      then
        sql="update trail_info set perf_poll_interval = $param_val where master_dbid = (select dbid from master_info where dbname = '$master_db_name') and slave_dbid = (select dbid from slave_info where dbname = '$slave_db_name');"
      else
        print_error 0 err_get_int_value perf_poll_interval 10 60
      fi
      ;;
    2)
      if [ -z "$param_val" ]
      then
        print_mes GET_VALUE size_of_log_buffer 100 1000
        read param_val
      else
        param_val=$2
      fi
      if [ -z "$param_val" ]
      then
        print_error 0 err_get_int_value size_of_log_buffer 100 1000
      elif [ $param_val -ge 100 -a $param_val -le 1000 ]
      then
        sql="update master_info set size_of_log_buffer = $param_val where dbname = '$master_db_name'"
      else
        print_error 0 err_get_int_value size_of_log_buffer 100 1000
      fi
      ;;
    3)
      if [ -z "$param_val" ]
      then
        print_mes GET_VALUE size_of_cache_buffer 100 500
        read param_val
      else
        param_val=$2
      fi
      if [ -z "$param_val" ]
      then
        print_error 0 err_get_int_value size_of_cache_buffer 100 500
      elif [ $param_val -ge 100 -a $param_val -le 500 ]
      then
        sql="update master_info set size_of_cache_buffer = $param_val where dbname = '$master_db_name'"
      else
        print_error 0 err_get_int_value size_of_cache_buffer 100 500
      fi
      ;;
    4)
      if [ -z "$param_val" ]
      then
        print_mes GET_VALUE size_of_copylog 1000 10000
        read param_val
      else
        param_val=$2
      fi
      if [ -z "$param_val" ]
      then
        print_error 0 err_get_int_value size_of_copylog 1000 10000
      elif [ $param_val -ge 1000 -a $param_val -le 10000 ]
      then
        sql="update master_info set size_of_copylog = $param_val where dbname = '$master_db_name'"
      else
        print_error 0 err_get_int_value size_of_copylog 1000 10000
      fi
      ;;
    5)
      if [ -z "$param_val" ]
      then
        print_mes GET_YN index_replication
        read param_val
      else
        param_val=$2
      fi
      if [ -z "$param_val" ]
      then
        print_error 0 err_get_yn index_replication 
      elif [ $param_val = 'y' -o $param_val = 'Y' -o $param_val = 'n' -o $param_val = 'N' ]
      then
        sql="update trail_info set index_replication = '$param_val' where master_dbid = (select dbid from master_info where dbname = '$master_db_name') and slave_dbid = (select dbid from slave_info where dbname = '$slave_db_name');"
      else
        print_error 0 err_get_yn index_replication 
      fi
      ;;
    6)
      if [ -z "$param_val" ]
      then
        print_mes GET_YN for_recovery
        read param_val
      else
        param_val=$2
      fi
      if [ -z "$param_val" ]
      then
        print_error 0 err_get_yn for_recovery 
      elif [ $param_val = 'y' -o $param_val = 'Y' -o $param_val = 'n' -o $param_val = 'N' ]
      then
        sql="update trail_info set for_recovery = '$param_val' where master_dbid = (select dbid from master_info where dbname = '$master_db_name') and slave_dbid = (select dbid from slave_info where dbname = '$slave_db_name');"
      else
        print_error 0 err_get_yn for_recovery 
      fi
      ;;
    7)
      if [ -z "$param_val" ]
      then
        print_mes GET_VALUE log_apply_interval 0 600
        read param_val
      else
        param_val=$2
      fi
      if [ -z "$param_val" ]
      then
        print_error 0 err_get_int_value log_apply_interval 0 600
      elif [ $param_val -ge 0 -a $param_val -le 600 ]
      then
        sql="update trail_info set log_apply_interval = $param_val where master_dbid = (select dbid from master_info where dbname = '$master_db_name') and slave_dbid = (select dbid from slave_info where dbname = '$slave_db_name');"
      else
        print_error 0 err_get_int_value log_apply_interval 0 600
      fi
      ;;
    8)
      if [ -z "$param_val" ]
      then
        print_mes GET_VALUE restart_interval 1 60
        read param_val
      else
        param_val=$2
      fi
      if [ -z "$param_val" ]
      then
        print_error 0 err_get_int_value restart_interval 1 60
      elif [ $param_val -ge 1 -a $param_val -le 60 ]
      then
        sql="update trail_info set restart_interval = $param_val where master_dbid = (select dbid from master_info where dbname = '$master_db_name') and slave_dbid = (select dbid from slave_info where dbname = '$slave_db_name');"
      else
        print_error 0 err_get_int_value restart_interval 1 60
      fi
      ;;
    *)
      print_error 0 err_undefined_param
      ;;
  esac

  if [ -n "$sql" ]
  then
    $rootdir/bin/csql $dist_db_name -u DBA -p "$distpw" -c "$sql"
    if [ "$?" = "0" ]
    then
      print_mes SUCCESS
      echo
    else
      print_error 0 err_general
      echo "             $result"
      echo $sql
    fi
  fi
  
}

CurDir=`eval pwd`

###############################################################################
# STEP 0 : read the parameters 
###############################################################################
if [ $# -eq 1 ]  && [ "$1" = "--help" ]
then
  full_usage
fi

master_db_name=$1
slave_db_name=$2
dist_db_name=$3

while [ $# -ne 0 ]
do
  case $4 in 
     -n) 
        shift
        param_name=$4
        ;;
     -v)
        shift
        param_val=$4
        ;;
     -p)
        shift
        distpw=$4
        ;;
     *)
        ;;
  esac
  shift
done

#check inputs
if [ -z "$master_db_name" ]
then
  usage 1
fi

if [ -z "$slave_db_name" ]
then
  usage 1
fi

if [ -z "$dist_db_name" ]
then
  usage 1
fi

if [ -n "$param_name" -a -z "$param_val" ]
then
  usage 1
fi

###############################################################################
# trying to get root
###############################################################################
RootDir="CUBRID"

for i in $RootDir
do
  seevar="echo \$$i"
  rootdir=`eval $seevar`
  if [ -n "$rootdir" ]
  then
    break;
  fi
done

if [ -z "$rootdir" ]
then
  print_error err_check_env "- CUBRID"
fi

RootDir="CUBRID_DATABASES"

for i in $RootDir
do
  seevar="echo \$$i"
  rootdir_db=`eval $seevar`
  if [ -n "$rootdir_db" ]
  then
    break;
  fi
done

if [ -z "$rootdir_db" ]
then
  print_error err_check_env "- CUBRID_DATABASES"
fi

lang="$CUBRID_LANG"
if [ -z "$lang" ]
then
  lang="en_US"
fi

kor_yn="no"
if [ ! -z "$lang" ] && [ "$lang" = "ko_KR.euckr" ]
then
  kor_yn="yes"
fi

###############################################################################
# main block
###############################################################################
if [ -n "$param_name" -a -n "$param_val" ]
then
  case $param_name in
    perf_poll_interval)
      param_num=1
      ;;
    size_of_log_buffer)
      param_num=2
      ;;
    size_of_cache_buffer)
      param_num=3
      ;;
    size_of_copylog)
      param_num=4
      ;;
    index_replication)
      param_num=5
      ;;
    for_recovery)
      param_num=6
      ;;
    log_apply_interval)
      param_num=7
      ;;
    restart_interval)
      param_num=8
      ;;
    *)
      print_error 1 err_undefined_param $param_name
  esac
  change_param $param_num $param_val
else            # interactive mode
print_mes INTER_MES  # print the parameters

print_mes PARAM_NUM  # enter the param num to be changed
read param_num

while [ $param_num != 'q' ] && [ $param_num != 'Q' ]
do
  change_param $param_num
  print_mes PARAM_NUM  # enter the param num to be changed
  read param_num
  param_val=
done
fi
