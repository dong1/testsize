#!/bin/sh
###############################################################################
#  Script Name : repl_make_group
#
#  Overview 
#
#  Using this script, the user makes the replication group. 
#  That is, the user selects classes to be replicated. 
#  Only the classes within replication group would be replicated.
#
#
###############################################################################

###############################################################################
# function : print out usage info
###############################################################################
usage() 
{
  exec_name=`basename $0`
  echo "usage: $exec_name master_db_name dist_db_name [-p passwd] [-f file_name] [-a | -d class_name_list] [-i]" 1>&2
  exit 1
}

###############################################################################
# function : print message
###############################################################################
print_mes_h() 
{
  case $1 in 
    add_success)
      echo "  $2 복제 대상으로 추가되었습니다."
      ;;
    drop_success)
      echo "  $2 복제 대상에서 제외되었습니다."
      ;;
    all_repl)
      echo "  $master_db_name의 모든 클래스가 복제 대상으로 지정되어 있습니다."
      ;;
    print_classes)
      echo "  복제 대상으로 지정된 클래스 목록: "
      ;;
    no_class)
      echo "      -->> 복제 대상으로 지정된 클래스가 없습니다."
      ;;
    reset_yn)
      printf "  복제 그룹을 다시 설정하시겠습니까? (y 또는 n) >> "
      ;;
    int_case1)
      echo "  1. 복제 그룹을 초기화하고 클래스를 새로 추가 "
      ;;
    int_case2)
      echo "  2. 전체 클래스 중에서 복제 제외 클래스 지정"
      ;;
    int_case3)
      echo "  3. 현재 상태에서 새로운 클래스 추가"
      ;;
    int_case4)
      echo "  4. 현재 상태에서 복제 제외 클래스 지정"
      ;;
    int_case5)
      echo "  5. 전체 클래스를 복제 대상으로 지정"
      ;;
    read_job_num)
      printf "    ==> 작업 번호 입력 (q - quit) >> "
      ;;
    read_class_name)
      echo "    ==> 클래스명을 입력 (쉼표 또는 공백으로 구분하여 입력)"
      ;;
    read_master_id)
      printf "    ==> MasterDB 사용자 아이디 입력 : "
      ;;
    read_master_passwd)
      printf "    ==> MasterDB 사용자 비밀번호 입력 : "
      ;;
    file_start)
      echo "  $file_name에 지정된 클래스들을 복제 그룹으로 설정합니다."
      echo
      ;;
    file_end)
      echo
      echo "  총 $total_cnt 개의 클래스가 복제 그룹으로 설정되었습니다." 
      ;;
    reset_done)
      echo "  $master_db_name의 모든 클래스가 복제 그룹으로 설정되었습니다."
      ;;
  esac
}

print_mes_e() 
{
  case $1 in 
    add_success)
      echo "  $2 is added into the replication group."
      ;;
    drop_success)
      echo "  $2 is removed from the replication group."
      ;;
    all_repl)
      echo "  All the classes of $master_db_name are included in the replication group."
      ;;
    print_classes)
      echo "  Classes in replication Group: "
      ;;
    no_class)
      echo "      -->> No class in the replication group"
      ;;
    reset_yn)
      printf "  Would you like to reset the replication group? (y or n) >> "
      ;;
    int_case1)
      echo "  1. Recreate the replication group with the specified classes" 
      ;;
    int_case2)
      echo "  2. Recreate the replication group with all classes except the specified classes" 
      ;;
    int_case3)
      echo "  3. Add specified classes to the replication group" 
      ;;
    int_case4)
      echo "  4. Remove specified classes from the replication group" 
      ;;
    int_case5)
      echo "  5. Add all classes to the replication group"
      ;;
    read_job_num)
      printf "    ==> Enter the job number (q - quit) >> "
      ;;
    read_class_name)
      echo "    ==> Enter the class names (delimiter: , or space)"
      ;;
    read_master_id)
      printf "    ==> Enter the MasterDB user id : "
      ;;
    read_master_passwd)
      printf "    ==> Enter the MasterDB password : "
      ;;
    file_start)
      echo "  Start to add classes in $file_name into the replication group " 
      echo
      ;;
    file_end)
      echo
      echo "  $total_cnt classes were added into the replication group."
      ;;
    reset_done)
      echo "  All the classes of $master_db_name were added into the replication group"
      ;;
  esac
}

print_mes() 
{
  if [ "$kor_yn" = "yes" ]
  then
    print_mes_h "$1" "$2"
  else
    print_mes_e "$1" "$2"
  fi
}

#"##############################################################################
# function : print error message
###############################################################################
print_error_h() 
{
  case $1 in 
    class_not_exists) 
      echo " << ERROR >> $class_name은 데이터베이스 - $master_db_name에 존재하지 않습니다." 
      ;;
    add_error) 
      echo " << ERROR >> 복제 그룹에 '$class_name' 추가 시 오류가 발생하였습니다."
      echo "       $2"
      ;;
    file_not_exists)
      echo " << ERROR >> $file 이 존재하지 않습니다."
      ;;
    f_set_with_ad)
      echo " << ERROR >> -f 옵션과 -a 또는 -d 옵션은 같이 사용될 수 없습니다."
      ;;
    a_set_with_d)
      echo " << ERROR >> -a 옵션과 -d 옵션은 같이 사용될 수 없습니다."
      ;;
    check_env)
      printf " << ERROR >> 환경 변수 설정을 확인하시기 바랍니다." 
      echo "$2"
      ;;
    master_info_error)
      printf " << ERROR >> $dist_db_name의 master_info class를 확인하시기 바랍니다."
      echo "$2"
      ;;
    drop_error)
      echo " << ERROR >> '$class_name'를 복제 대상에서 삭제 시 오류가 발생하였습니다."
      echo "        $2"
      ;;
  esac
}

print_error_e() 
{
  case $1 in 
    class_not_exists) 
      echo " << ERROR >> - '$class_name' is not exists in database -  $master_db_name." 
      ;;
    add_error) 
      echo " << ERROR >> Fail to add '$class_name' into the replication group."
      echo "       $2"
      ;;
    file_not_exists)
      echo " << ERROR >>: $file doesn't exists "
      ;;
    f_set_with_ad)
      echo " << ERROR >> -f option can't be set with -a or -d option."
      ;;
    a_set_with_d)
      echo " << ERROR >>  -a option can't be set with -d option."
      ;;
    check_env)
      printf " << ERROR >> Check the environment variable."
      echo "$2"
      ;;
    master_info_error)
      printf " << ERROR >> Check the master_info class of $dist_db_name."
      echo "$2"
      ;;
    drop_error)
      echo " << ERROR >>  Fail to drop '$class_name' from the replication group"
      echo "        $2"
      ;;
  esac
}

print_error() 
{
  if [ "$kor_yn" = "yes" ]
  then
    print_error_h $1 "$2"
  else
    print_error_e $1 "$2"
  fi
  if [ -z "$3" ]
  then
    echo "-------------------------------------------------------------------------"
    exit 1
  fi
}

###############################################################################
# function : check the class name
###############################################################################
execute_sql() 
{

  if [ "$debug" = "y" ]
  then
    echo "DEBUG: execute_sql - $sql"
  fi
  sql="$sql; commit work;"

  if [ $1 = 1 ]
  then
    $rootdir/bin/csql $dist_db_name -u DBA -p "$dba_pass" -c "$sql" 
  elif [ $1 = 2 ]
  then
    $rootdir/bin/csql $dist_db_name -u DBA -p "$dba_pass" -c "$sql" > .repl_group.tmp 
  elif [ $1 = 4 ]
  then
    $rootdir/bin/csql $master_db_name@$master_host -u $master_id -p "$master_passwd" -c "$sql" > .repl_group.tmp 
  else 
    $rootdir/bin/csql $dist_db_name -u DBA -p "$dba_pass" -c "$sql" 2> .repl_group.tmp 
  fi
}

###############################################################################
# function : check the class name
###############################################################################
check_class() 
{
  check_class_result=1
  if [ $2 = 1 ]
  then
    sql="select 1 
           from db_class 
           where class_name = '$1'"
    if [ "$master_id" = "" ]
    then
      print_mes read_master_id
      read master_id
    fi
    if [ "$master_passwd" = "" ]
    then
      print_mes read_master_passwd
      read master_passwd
    fi
    execute_sql 4
  else
    sql="select 1 
           from repl_group 
           where master_dbid = $master_dbid and 
                 slave_dbid = $slave_dbid and class_name = '$1'"
    execute_sql 2
  fi

  if [ "$?" -ne 0 ] 
  then
    check_class_result=2
  else
    result=`eval cat .repl_group.tmp | egrep "no result"`
    if [ -n "$result" ]
    then
      check_class_result=0
    fi
  fi
}

check_class_list() 
{
  if [ "$debug" = "y" ]
  then
    echo "DEBUG: class_list : $1"
  fi
  for check_class_name in $1
  do
    check_class $check_class_name 1   # if the class_name is in master db ?
    if [ "$check_class_result" -eq 0 ]
    then
      print_error class_not_exists
    elif [ "$check_class_result" -eq 2 ]
    then
      cat .repl_group.tmp
      exit 1
    fi
  done
}

###############################################################################
# function : initialize class_info and repl_group
###############################################################################
init_class_info_and_repl_group()
{
  if [ "$debug" = "y" ]
  then
    echo "DEBUG: initialize class_info and repl_group"
  fi
  if [ "$master_id" = "" ]
  then
    print_mes read_master_id
    read master_id
  fi
  if [ "$master_passwd" = "" ]
  then
    print_mes read_master_passwd
    read master_passwd
  fi

  sql="select class_name from db_class where is_system_class = 'NO' difference select partition_class_name from db_partition"
  execute_sql 4
  if [ "$?" -ne 0 ]
  then
    cat .repl_group.tmp
    exit 1
  fi

  exec 5< .repl_group.tmp
  count=1
  sql="delete from class_info; delete from repl_group;"
  while read -u5 init_class_name
  do
    if [ $count -gt 5 ]
    then
       if [ -n "$init_class_name" ]
       then
         if [ "$1" -eq 1 ]
         then
           sql="$sql
                insert into class_info values ($master_dbid, $init_class_name);
                insert into repl_group values ($master_dbid, $slave_dbid, $init_class_name, -1, -1);"
         else
           sql="$sql
                insert into class_info values ($master_dbid, $init_class_name);"
         fi
       fi
    fi
    count=$(($count+1))
  done
  execute_sql 3
  if [ "$?" -ne 0 ]
  then
    cat .repl_group.tmp
    exit 1
  fi
}

###############################################################################
# function : add a class to the replication group
###############################################################################
add_class() 
{

  if [ "$debug" = "y" ]
  then
    echo "DEBUG: add_class"
  fi

  if [ -n "$1" ]
  then
    sql="insert into repl_group values ($master_dbid, $slave_dbid, '$1', -1, -1);"
    execute_sql 3
    result=`eval cat .repl_group.tmp | egrep "ERROR"`
  fi
}

add_class_list() 
{

  if [ "$debug" = "y" ]
  then
    echo "DEBUG: add_class_list"
  fi

  for add_class_name in $1
  do
    add_class $add_class_name
    if [ -n "$result" ]
    then
      print_error add_error "$result"
    fi
  done
}

###############################################################################
# function : remove a class to the replication group
###############################################################################
drop_class() 
{

  if [ "$debug" = "y" ]
  then
    echo "DEBUG: drop_class"
  fi

  sql="delete from repl_group 
         where master_dbid = $master_dbid and
               slave_dbid = $slave_dbid and
               class_name = '$1'"

  execute_sql 3

  result=`eval cat .repl_group.tmp | egrep "ERROR"`

}

drop_class_list() 
{
  if [ "$debug" = "y" ]
  then
    echo "DEBUG: drop_class_list"
  fi

  for drop_class_name in $1
  do
    drop_class $drop_class_name
    if [ -n "$result" ]
    then
      print_error drop_error "$result"
    fi
  done
}


###############################################################################
# function : reset the replication group
###############################################################################
reset_repl_group() 
{
  if [ $1 = 0 ] 
  then
    sql="update trail_info 
           set all_repl = 'n' 
           where master_dbid = $master_dbid and 
                 slave_dbid = $slave_dbid;"
    execute_sql 1
    init_class_info_and_repl_group 0
  elif [ $1 = 1 ]
  then
    sql="update trail_info 
           set all_repl = 'n' 
           where master_dbid = $master_dbid and 
                 slave_dbid = $slave_dbid;"
    execute_sql 1
  elif [ $1 = 2 ]
  then
    sql="update trail_info 
           set all_repl = 'n' 
           where master_dbid = $master_dbid and 
                 slave_dbid = $slave_dbid; "
    execute_sql 1
    init_class_info_and_repl_group 1
  elif [ $1 = 3 ]
  then
    sql="update trail_info 
           set all_repl = 'y'
           where master_dbid = $master_dbid and
                 slave_dbid = $slave_dbid;"
    execute_sql 1
    init_class_info_and_repl_group 1
  fi

  if [ "$debug" = "y" ]
  then
    echo "DEBUG: reset_repl_group - $sql"
  fi

}

###############################################################################
# function : get master_db host
###############################################################################
get_master_ip() 
{
  # select master host ip
  sql="select master_ip from master_info where dbname='$master_db_name'"
  execute_sql 2

  # error check
  result=`eval cat .repl_group.tmp | egrep "no results"`
  if [ -n "$result" ]
  then
    print_error master_info_error
  fi

  # get host ip
  count=1
  while read dum1
  do
    if [ $count -gt 5 ]
    then
      master_host=`echo "$dum1" | awk '{print $1}'`
      master_host=`eval expr $master_host`
      break;
    fi
    count=$(($count+1))
  done < .repl_group.tmp
  echo "MASTER_HOST : $master_host"
}

###############################################################################
# function : make replication group using a file
###############################################################################
set_repl_group_using_file() 
{
 
  if [ "$debug" = "y" ]
  then
    echo "DEBUG: set_repl_group_using_file "
  fi

  total_cnt=0
  print_mes file_start

  if [ -r $1 ]
  then
    exec 5< $1 
    count=1
    while read -u5 class_name
    do
      check_class $class_name 1
      if [ "$check_class_result" -eq 1 ] 
      then
        add_class $class_name
        if [ -n "$result" ]
        then
          print_error add_error $result "n"
        fi
        total_cnt=$(($total_cnt+1))
      else
        if [ "$check_class_result" -eq 2 ]
        then
          cat .repl_group.tmp
          exit 1
        else
          print_error class_not_exists $result "n"
        fi
      fi
    done
  else
    print_error file_not_exists 
  fi
  
  print_mes file_end
}

CurDir=`eval pwd`

###############################################################################
# function : process a option
#            Add classes into the replication group
#            If the user wants to add classes after initialization, set the 
#            replication group empty.
#            Otherwise, just set the all_repl flag as 'N'. 
###############################################################################
process_a_option() 
{
  if [ "$debug" = "y" ]
  then
    echo "DEBUG: -a option processing "
  fi

  check_class_list "$class_name_list"
  # set the all_repl as 'n'
  if  [ "$inityn" = "y" ]
  then
    reset_repl_group 0
  else
    reset_repl_group 1
  fi

  add_class_list "$class_name_list"
  print_mes add_success "$class_name_list"
}

###############################################################################
# function : process d option
###############################################################################
process_d_option() 
{
  if [ "$debug" = "y" ]
  then
    echo "DEBUG: -d option processing "
  fi

  check_class_list "$class_name_list"
  if [ "$inityn" = "y" ]
  then
    reset_repl_group 2
  else
    reset_repl_group 1
  fi

  drop_class_list "$class_name_list"
  print_mes drop_success "$class_name_list"
}

###############################################################################
# function : read class names
###############################################################################
read_class_name_list() 
{

  print_mes read_class_name
  read class_name_list
  class_name_list=`eval echo "$class_name_list" | sed 's/,/ /g'`
}

##############################################################################
# STEP 0 : read the parameters 
###############################################################################
master_db_name=$1
dist_db_name=$2

a_option=0
d_option=0
inityn=n
debug=n

while [ $# -ne 0 ]
do
  case $3 in 
     -f) 
        shift
        file_name=$3
        ;;
     -a)
        shift
        class_name_list=$3
        a_option=1
        ;;
     -d)
        shift
        class_name_list=$3
        d_option=1
        ;;
     -p)
        shift
        dba_pass=$3
        ;;
     -i)
        shift
        inityn=y
        ;;
     -v)
        shift
        debug=y
        ;;
     *)
        ;;
  esac
  shift
done

if [ -n "$class_name_list" ]
then
  class_name_list=`eval echo "$class_name_list" | sed 's/,/ /g'`
fi

#check inputs
if [ -z "$master_db_name" ]
then
  usage
fi
if [ -z "$dist_db_name" ]
then
  usage
fi

if [ -n "$file_name" -a -n "$class_name_list" ]
then
  print_error file_not_exists
fi

if [ `expr $a_option + $d_option` =  2  ]
then
  print_error a_set_with_d
fi 


###############################################################################
# trying to get root
###############################################################################
RootDir="CUBRID"
master_id=""
master_passwd=""

for i in $RootDir
do
  seevar="echo \$$i"
  rootdir=`eval $seevar`
  if [ -n "$rootdir" ]
  then
    break;
  fi
done

if [ -z "$rootdir" ]
then
  print_error check_env "- $RootDir"
fi

RootDir="CUBRID_DATABASES"

for i in $RootDir
do
  seevar="echo \$$i"
  rootdir_db=`eval $seevar`
  if [ -n "$rootdir_db" ]
  then
    break;
  fi
done

if [ -z "$rootdir_db" ]
then
  print_error check_env "- $RootDir"
fi

lang="$CUBRID_LANG"
if [ -z "$lang" ]
then
  lang="en_US"
fi

kor_yn="no"
if [ ! -z "$lang" ] && [ "$lang" = "ko_KR.euckr" ]
then
  kor_yn="yes"
fi

get_master_ip

#############################################################################
# STEP 1 : find out the slave_db_name, dbid of master db, dbid of slave db
#############################################################################
sql="select t.master_dbid, t.slave_dbid, s.dbname, t.all_repl
        from trail_info t 
            inner join slave_info s on s.dbid = t.slave_dbid
        where t.master_dbid = 
               (select dbid from master_info where dbname = '$master_db_name')"

execute_sql 2
exec 5< .repl_group.tmp
count=1
while read -u5 master_dbid slave_dbid slave_db_name all_repl
do
  if [ $count -gt 5 ]
  then
    slave_db_name=`eval expr $slave_db_name`
    all_repl=`eval expr $all_repl`
    break; 
  fi 
  count=$(($count+1))
done


#############################################################################
# STEP 2 : Change the repl group
#############################################################################
# Using file containing the class name list
echo "-------------------------------------------------------------------------"
if [ -n "$file_name" ]
then

  if [ "$debug" = "y" ]
  then
    echo "DEBUG: -f option processing "
  fi
  # set the all_repl as 'n', and delete all instances from the repl_group
  reset_repl_group 0
  set_repl_group_using_file $file_name

# add classes to the repl group
elif [ $a_option = 1 ]
then
  process_a_option
# drop the classes from the repl group
elif [ $d_option = 1 ]
then
  process_d_option

# Interactive mode
else
  if [ "$debug" = "y" ]
  then
    echo "DEBUG: interactive processing "
  fi

  if [ "$all_repl" = "y" -o  "$all_repl" = "Y"  ]
  then
    print_mes all_repl
  else
    sql="select class_name 
           from repl_group 
           where master_dbid = $master_dbid and 
                 slave_dbid = $slave_dbid"
    execute_sql 2
    exec 5< .repl_group.tmp
    count=1
    class_name_list=
    print_mes print_classes
    while read -u5 class_name
    do
      if [ $count -gt 5 ]
      then
          echo "    $class_name"
          class_name_list=$class_name_list" "$class_name
      fi
      count=$(($count+1))
    done
    if [ $count -eq 5 -a -z "$class_name" ]
    then
      print_mes no_class
    fi
  fi

  echo

  print_mes reset_yn
  read result
  if [ "$result" = "n" -o "$result" = "N" ]
  then
    echo "-------------------------------------------------------------------------"
    exit 1
  fi

  if [ "$all_repl" = "y" -o "$all_repl" = "Y" ]
  then
    print_mes int_case1  # add .. after initialization
    print_mes int_case2  # remove.. from the full set
  else
    print_mes int_case1  # add .. after initialization
    print_mes int_case2  # remove.. from the full set 
    print_mes int_case3  # add to the current repl group
    print_mes int_case4  # remove.. from the current repl group
    print_mes int_case5  # initialize
  fi

  print_mes read_job_num
  read job_type

  case $job_type in 
    1)                            # add .. after initialization
      inityn="y"
      read_class_name_list
      process_a_option
      ;;
    2)
      inityn="y"
      read_class_name_list
      process_d_option
      ;;
    3)                            # add to the current repl group
      inityn="n"
      read_class_name_list
      process_a_option
      ;;
    4)
      inityn="n"
      read_class_name_list
      process_d_option
      ;;
    5)
      reset_repl_group 3
      print_mes reset_done
      ;;
    q) 
      ;;
    *)
  esac      
fi
echo "-------------------------------------------------------------------------"
